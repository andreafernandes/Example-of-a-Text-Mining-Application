{"name":"Appetite-textmining-code","tagline":"Using GATE to text mine 'appetite'","body":"# appetite-textmining-code\r\n\r\n\r\n**Using [GATE](https://gate.ac.uk/family/) to text mine a data variable, which happens to be 'appetite'**\r\n\r\nThis repo is a record of my [JAPE](https://gate.ac.uk/sale/tao/splitch8.html#chap:jape) code to text mine the variable \"appetite\" within a bespoke psychiatric health record database, [CRIS](http://www.slam.nhs.uk/about/core-facilities/cris). \r\n\r\nIt is mainly for my own benefit but do feel free to contact me for suggestions, questions or constructive feedback!\r\n\r\n\r\n##About Author\r\n\r\n\r\n###Details and Contact Information\r\n| Author Name | Andrea Fernandes| \r\n|:--------|:--------------|\r\n|Occupation| PhD student, 2nd Year|\r\n|Email | andrea.fernandes@kcl.ac.uk|\r\n|University|King's College London|\r\n|Funding| MHRUK - Mental Health Research UK|\r\n\r\n**********\r\n\r\n\r\nPurpose of 'Appetite Variable' -   \r\nThis code will highlight the term 'appetite' AND any terms which collectively describe either 'good' or 'poor' appetite.\r\n\r\n\r\n| Data source         | [CRIS](http://www.slam.nhs.uk/about/\t\t\t\t\t\t\tcore-facilities/cris) - Pseudonymised \t\t\t\t\t\t\telectronic psychiatric healthcare \t\t\t\t\t\t\trecords| \r\n|:--------------------|:------------|\r\n|Data extracted       | Clinical notes with the term \t\t\t\t\t\t\t'appetite' menioned were extracted \t\t\t\t\t\t\t and processed to be read by GATE. \t\t\t\t\t\t\t Contact author for details on this. |\r\n|Text-mining software | [GATE](www.gate.ac.uk)|\r\n\r\n\r\n*************\r\n##Training Data\r\n\r\nThe following JAPE code and [gazateers](https://gate.ac.uk/sale/tao/splitch13.html) were generated after using 500 documents, each of which had the term 'appetite' mentioned and each of which was coded by two separate annotators to describe \"good\" or \"bad appetite\". \r\n\r\nRules to code appetite were generated beforehand and were kept as simple as possible: ![GOLD STANDARD RULES](https://cloud.githubusercontent.com/assets/10629155/12238166/95b70598-b87a-11e5-9fe6-dcefe1bd904b.png) \r\n\r\n\r\n\r\n#### GAZATEERS\r\n\r\nA Gazateer is - basically -  a list of terms stored in a .lst file. \r\n\r\nI used 5 gazateers to help me pick up \"good\" or \"bad appetite\" (The list of terms were derived from scoping exercises on CRIS, whose aim was to determine the types of words used to describe appetite in CRIS). \r\n\r\nHere's the list of .lst files I generated. These are in the \"gazateer\" repository: \r\n\r\n\r\n\r\n###### Gazateer 1: appetite_gazateer.lst file \r\n\r\n###### Gazateer 2: appetite poor describe.lst \r\n\r\n###### Gazateer 3: appetite good describe.lst\r\n\r\n###### Gazateer 4: negation.lst\r\n\r\n###### Gazateer 5: symptom_gazateer.lst \r\n\r\n\r\nThese .lst files are then saved into a single  .def file, which looks like so:\r\n\r\n\r\n```\r\nappetite_gazateer.lst:appetite_mention\r\nappetite_poor_describe.lst:appetite_description:poor\r\nappetite_good_describe.lst:appetite_description:good\r\nnegation.lst:negationterms:negation\r\nsymptom_gazateer.lst:Symptom:symptoms\r\n```\r\n\r\n\r\n\r\n#### JAPE CODE\r\n\r\nThis jape code was written after going through the Training set data (500 documents) and generating a set of \"patterns\" or themes in the text that appeared consistently or often in the documents, when describing appetite. \r\n\r\nBased on the themes I wrote the following JAPE code, in chunks. I have each chunk priority to be run, according to how often these themes were mentioned in the text.\r\n\r\n\r\n\r\n######FINAL JAPE code\r\n\r\n\r\n```\r\nPhase: Appetite\r\nInput: Lookup Token Split\r\nOptions: control = appelt\r\n\r\n\r\n\r\nRule: AppetiteThenDescriber\r\nPriority: 10\r\n\r\n(\r\n\r\n\t({Token.string =~ \"[Aa]ppetite\", !Lookup.MajorType == \"Symptom\"}):SymptomAppetiteOnly\r\n\r\n\t({Lookup.minorType == \"good\"} | \r\n \t {Lookup.minorType == \"poor\"}):descriptorsOfAppetite\r\n\r\n):AppetiteDescription\r\n-->\r\n:AppetiteDescription.Appetite = {rule = \"AppetiteDescription1\", AppetiteType = :descriptorsOfAppetite.Lookup.minorType, ApplyNegation = \"no\"}\r\n\r\n\r\n\r\n\r\nRule: AppetiteThenDescriber\r\nPriority: 9\r\n(\r\n\r\n\t({Token.string =~ \"[Aa]ppetite\", !Lookup.MajorType == \"Symptom\"}):SymptomAppetiteOnly\r\n\r\n\t {Token.category == \":\", Token.category != \",\"} \r\n\t({Lookup.minorType == \"good\"} | \r\n  \t {Lookup.minorType == \"poor\"}):descriptorsOfAppetite\r\n\r\n):AppetiteDescription\r\n-->\r\n:AppetiteDescription.Appetite = {rule = \"AppetiteDescription2\", AppetiteType = :descriptorsOfAppetite.Lookup.minorType, ApplyNegation = \"no\"}\r\n\r\n\r\n\r\n\r\nRule: DescriberThenAppetite\r\nPriority: 9\r\n(\r\n\r\n\t({Lookup.minorType == \"good\"} | \r\n\t {Lookup.minorType == \"poor\"}):descriptorsOfAppetite\r\n\t {Token.category != \",\"}\r\n\t({Token.string =~ \"[Aa]ppetite\", !Lookup.MajorType == \"Symptom\"}):SymptomAppetiteOnly\r\n\r\n):AppetiteDescription\r\n-->\r\n:AppetiteDescription.Appetite = {rule = \"AppetiteDescription3\", AppetiteType = :descriptorsOfAppetite.Lookup.minorType, ApplyNegation = \"no\"}\r\n\r\n\r\n\r\n\r\nRule: DescriberThenAppetite\r\nPriority: 8\r\n(\r\n\r\n\t({Lookup.minorType == \"good\"} | \r\n\t {Lookup.minorType == \"poor\"}):descriptorsOfAppetite\r\n\t {Token.category != \",\"}\r\n\t({Token,!Split})[0,3]\r\n\t({Token.string =~ \"[Aa]ppetite\", !Lookup.MajorType == \"Symptom\"}):SymptomAppetiteOnly\r\n\r\n):AppetiteDescription\r\n-->\r\n:AppetiteDescription.Appetite = {rule = \"AppetiteDescription4\", AppetiteType = :descriptorsOfAppetite.Lookup.minorType, ApplyNegation = \"no\"}\r\n\r\n\r\n\r\n\r\nRule: AppetiteThenDescriber\r\nPriority: 7\r\n(\r\n\r\n\t({Token.string =~ \"[Aa]ppetite\", !Lookup.MajorType == \"Symptom\"}):SymptomAppetiteOnly\r\n\t({Token,!Split})[0,3]\r\n\t {Token.category != \",\"}\r\n\t({Lookup.minorType == \"good\"} | \r\n\t {Lookup.minorType == \"poor\"}):descriptorsOfAppetite\r\n\r\n):AppetiteDescription\r\n-->\r\n:AppetiteDescription.Appetite = {rule = \"AppetiteDescription5\", AppetiteType = :descriptorsOfAppetite.Lookup.minorType, ApplyNegation = \"no\"}\r\n\r\n\r\n\r\n\r\nRule: AppetiteThenDescriber\r\nPriority: 7\r\n(\r\n\r\n\t({Lookup.minorType == negation}):Negationwords\r\n\t({Token,!Split})[0,3]\r\n\t({Lookup.minorType == \"good\"}  | \r\n\t {Lookup.minorType == \"poor\"}):descriptorsOfAppetite\r\n\t({Token,!Split})[0,3]\r\n\t({Token.string =~ \"[Aa]ppetite\", !Lookup.MajorType == \"Symptom\"}):SymptomAppetiteOnly\r\n\r\n):AppetiteDescriptionwithNegation\r\n-->\r\n:AppetiteDescriptionwithNegation.Appetite = {rule = \"AppetiteDescriptionwithNegation6\", AppetiteType = :descriptorsOfAppetite.Lookup.minorType, ApplyNegation = \"yes\"}\r\n\r\n\r\n\r\n\r\nRule: AppetiteThenDescriber\r\nPriority: 6\r\n(\r\n\r\n\t({Token.string =~ \"[Aa]ppetite\", !Lookup.MajorType == \"Symptom\"}):SymptomAppetiteOnly\t\r\n\t({Token,!Split})[0,3]\r\n\t({Lookup.minorType == negation}):Negationwords\r\n\t({Token,!Split})[0,3]\r\n\t({Lookup.minorType == \"good\"}  | \r\n\t {Lookup.minorType == \"poor\"}):descriptorsOfAppetite\r\n\r\n):AppetiteDescriptionwithNegation\r\n-->\r\n:AppetiteDescriptionwithNegation.Appetite = {rule = \"AppetiteDescriptionwithNegation7\", AppetiteType = :descriptorsOfAppetite.Lookup.minorType, ApplyNegation = \"yes\"}\r\n\r\n\r\n\r\n\r\nRule: AppetiteThenDescriber\r\nPriority: 6\r\n(\r\n\r\n\t({Token.string =~ \"[Nn]o\"})\r\n\t({!Token.string == \"change\"})\r\n\t({Token,!Split})[0,3]\r\n\t({Token.string =~ \"[Aa]ppetite\", !Lookup.MajorType == \"Symptom\"}):SymptomAppetiteOnly\r\n\t({Token.string =~ \"[Pp]roblems\"})\r\n\r\n):AppetiteDescriptionwithNegation\r\n-->\r\n:AppetiteDescriptionwithNegation.Appetite = {rule = \"AppetiteDescriptionwithNegation8\", AppetiteType = \"good\" ApplyNegation = \"no\"}\r\n```\r\n \r\n\r\n\r\n***********************************\r\n# TESTING THE GAZATEER and JAPE CODE\r\n\r\nWe need to some Gold Standard data to test the above Gazateers and Code. \r\n\r\n### Gold Standard data \r\n\r\n500 documents extracted from CRIS. Each document contains the word \"appetite\"\r\n\r\nThese documents were annotated by two individuals to code good or bad appeite accoding to the [GOLD STANDARD RULES](https://cloud.githubusercontent.com/assets/10629155/12238166/95b70598-b87a-11e5-9fe6-dcefe1bd904b.png). \r\n\r\nThe inter-rater reliability was quite high - above 85% (but i don't have exact figures). \r\n\r\n\r\n###Final Performance\r\n\r\nTesting on Gold Standard data (500 documents) generated a precision of 80% and a recall of 73%.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}